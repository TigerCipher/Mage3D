
struct DirectionLight
{
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight
{
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

struct SpotLight
{
    vec3 position;
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;

    float cutoff;
    float outerCutoff;
};

#define NUM_PNT_LIGHTS 4

uniform DirectionLight directionLight;
uniform PointLight pointLights[NUM_PNT_LIGHTS];
uniform SpotLight spotLight;

vec4 calculateDirectionLight(DirectionLight light, Material mat, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    float diff = max(dot(normal, lightDir), 0.0);

    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), mat.shininess);

    vec4 ambient =  vec4(light.ambient, 1.0)     * texture(mat.texture_diffuse, fragTexCoord);
    vec4 diffuse =  vec4(light.diffuse, 1.0)     * diff * texture(mat.texture_diffuse, fragTexCoord);
    vec4 specular = vec4(light.specular, 1.0)   * spec * texture(mat.texture_specular, fragTexCoord);

    return (ambient + diffuse + specular);
}


vec4 calculatePointLight(PointLight light, Material mat, vec3 normal, vec3 pos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - pos);
    float diff = max(dot(normal, lightDir), 0.0);

    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), mat.shininess);

    float dist = length(light.position - pos);
    float atten = 1.0 / (light.constant + light.linear * dist + light.quadratic * (dist * dist));

    vec4 ambient = ( vec4(light.ambient, 1.0) * texture(mat.texture_diffuse, fragTexCoord)) * atten;
    vec4 diffuse = ( vec4(light.diffuse, 1.0) * diff * texture(mat.texture_diffuse, fragTexCoord)) * atten;
    vec4 specular = (vec4(light.specular, 1.0) * spec * texture(mat.texture_specular, fragTexCoord)) * atten;

    return (ambient + diffuse + specular);
}

vec4 calculateSpotLight(SpotLight light, Material mat, vec3 normal, vec3 pos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - pos);
    float diff = max(dot(normal, lightDir), 0.0);

    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), mat.shininess);

    float dist = length(light.position - pos);
    float atten = 1.0 / (light.constant + light.linear * dist + light.quadratic * (dist * dist));

    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutoff - light.outerCutoff;
    float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0, 1.0);

    vec4 ambient = ( vec4(light.ambient, 1.0) * texture(mat.texture_diffuse, fragTexCoord)) * atten * intensity;
    vec4 diffuse = ( vec4(light.diffuse, 1.0) * diff * texture(mat.texture_diffuse, fragTexCoord)) * atten * intensity;
    vec4 specular = (vec4(light.specular, 1.0) * spec * texture(mat.texture_specular, fragTexCoord)) * atten * intensity;

    return (ambient + diffuse + specular);
}